// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apigateway.proto

/*
Package apigateway is a generated protocol buffer package.

It is generated from these files:
	apigateway.proto

It has these top-level messages:
	ApigatewayMessage
*/
package apigateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import creapptive_message "creapptive.com/ims-security/api/message"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ApigatewayMessage struct {
	Say string `protobuf:"bytes,1,opt,name=say" json:"say,omitempty"`
}

func (m *ApigatewayMessage) Reset()                    { *m = ApigatewayMessage{} }
func (m *ApigatewayMessage) String() string            { return proto.CompactTextString(m) }
func (*ApigatewayMessage) ProtoMessage()               {}
func (*ApigatewayMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApigatewayMessage) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

func init() {
	proto.RegisterType((*ApigatewayMessage)(nil), "creapptive.api.ApigatewayMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Apigateway service

type ApigatewayClient interface {
	Login(ctx context.Context, in *creapptive_message.LoginRequest, opts ...grpc.CallOption) (*creapptive_message.LoginReply, error)
	CreateUser(ctx context.Context, in *creapptive_message.CreateUserRequest, opts ...grpc.CallOption) (*creapptive_message.CreateUserReply, error)
	GetUsers(ctx context.Context, in *creapptive_message.GetUsersRequest, opts ...grpc.CallOption) (*creapptive_message.GetUsersReply, error)
	GetUserByID(ctx context.Context, in *creapptive_message.GetUserByIDRequest, opts ...grpc.CallOption) (*creapptive_message.GetUserByIDReply, error)
	UpdateUser(ctx context.Context, in *creapptive_message.UpdateUserRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateUserReply, error)
	DeleteUser(ctx context.Context, in *creapptive_message.DeleteUserRequest, opts ...grpc.CallOption) (*creapptive_message.DeleteUserReply, error)
	ChangePassword(ctx context.Context, in *creapptive_message.ChangePasswordRequest, opts ...grpc.CallOption) (*creapptive_message.ChangePasswordReply, error)
	ResetPassword(ctx context.Context, in *creapptive_message.ResetPasswordRequest, opts ...grpc.CallOption) (*creapptive_message.ResetPasswordReply, error)
	GetMyself(ctx context.Context, in *creapptive_message.GetMyselfRequest, opts ...grpc.CallOption) (*creapptive_message.GetMyselfReply, error)
	CreatePrivilegeProfile(ctx context.Context, in *creapptive_message.CreatePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.CreatePrivilegeProfileReply, error)
	GetPrivilegeProfiles(ctx context.Context, in *creapptive_message.GetPrivilegeProfilesRequest, opts ...grpc.CallOption) (*creapptive_message.GetPrivilegeProfilesReply, error)
	GetPrivilegeProfileByID(ctx context.Context, in *creapptive_message.GetPrivilegeProfileByIDRequest, opts ...grpc.CallOption) (*creapptive_message.GetPrivilegeProfileByIDReply, error)
	UpdatePrivilegeProfile(ctx context.Context, in *creapptive_message.UpdatePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.UpdatePrivilegeProfileReply, error)
	DeletePrivilegeProfile(ctx context.Context, in *creapptive_message.DeletePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.DeletePrivilegeProfileReply, error)
	GetLocationTree(ctx context.Context, in *creapptive_message.GetLocationTreeRequest, opts ...grpc.CallOption) (*creapptive_message.GetLocationTreeReply, error)
	UpdateLocationTree(ctx context.Context, in *creapptive_message.UpdateLocationTreeRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateLocationTreeReply, error)
	GetScopeTree(ctx context.Context, in *creapptive_message.GetScopeTreeRequest, opts ...grpc.CallOption) (*creapptive_message.GetScopeTreeReply, error)
	UpdateScopeTree(ctx context.Context, in *creapptive_message.UpdateScopeTreeRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateScopeTreeReply, error)
	ChangeVersion(ctx context.Context, in *creapptive_message.ChangeVersionRequest, opts ...grpc.CallOption) (*creapptive_message.ChangeVersionReply, error)
}

type apigatewayClient struct {
	cc *grpc.ClientConn
}

func NewApigatewayClient(cc *grpc.ClientConn) ApigatewayClient {
	return &apigatewayClient{cc}
}

func (c *apigatewayClient) Login(ctx context.Context, in *creapptive_message.LoginRequest, opts ...grpc.CallOption) (*creapptive_message.LoginReply, error) {
	out := new(creapptive_message.LoginReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) CreateUser(ctx context.Context, in *creapptive_message.CreateUserRequest, opts ...grpc.CallOption) (*creapptive_message.CreateUserReply, error) {
	out := new(creapptive_message.CreateUserReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetUsers(ctx context.Context, in *creapptive_message.GetUsersRequest, opts ...grpc.CallOption) (*creapptive_message.GetUsersReply, error) {
	out := new(creapptive_message.GetUsersReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetUserByID(ctx context.Context, in *creapptive_message.GetUserByIDRequest, opts ...grpc.CallOption) (*creapptive_message.GetUserByIDReply, error) {
	out := new(creapptive_message.GetUserByIDReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateUser(ctx context.Context, in *creapptive_message.UpdateUserRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateUserReply, error) {
	out := new(creapptive_message.UpdateUserReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) DeleteUser(ctx context.Context, in *creapptive_message.DeleteUserRequest, opts ...grpc.CallOption) (*creapptive_message.DeleteUserReply, error) {
	out := new(creapptive_message.DeleteUserReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ChangePassword(ctx context.Context, in *creapptive_message.ChangePasswordRequest, opts ...grpc.CallOption) (*creapptive_message.ChangePasswordReply, error) {
	out := new(creapptive_message.ChangePasswordReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ResetPassword(ctx context.Context, in *creapptive_message.ResetPasswordRequest, opts ...grpc.CallOption) (*creapptive_message.ResetPasswordReply, error) {
	out := new(creapptive_message.ResetPasswordReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/ResetPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetMyself(ctx context.Context, in *creapptive_message.GetMyselfRequest, opts ...grpc.CallOption) (*creapptive_message.GetMyselfReply, error) {
	out := new(creapptive_message.GetMyselfReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetMyself", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) CreatePrivilegeProfile(ctx context.Context, in *creapptive_message.CreatePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.CreatePrivilegeProfileReply, error) {
	out := new(creapptive_message.CreatePrivilegeProfileReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/CreatePrivilegeProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetPrivilegeProfiles(ctx context.Context, in *creapptive_message.GetPrivilegeProfilesRequest, opts ...grpc.CallOption) (*creapptive_message.GetPrivilegeProfilesReply, error) {
	out := new(creapptive_message.GetPrivilegeProfilesReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetPrivilegeProfiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetPrivilegeProfileByID(ctx context.Context, in *creapptive_message.GetPrivilegeProfileByIDRequest, opts ...grpc.CallOption) (*creapptive_message.GetPrivilegeProfileByIDReply, error) {
	out := new(creapptive_message.GetPrivilegeProfileByIDReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetPrivilegeProfileByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdatePrivilegeProfile(ctx context.Context, in *creapptive_message.UpdatePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.UpdatePrivilegeProfileReply, error) {
	out := new(creapptive_message.UpdatePrivilegeProfileReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/UpdatePrivilegeProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) DeletePrivilegeProfile(ctx context.Context, in *creapptive_message.DeletePrivilegeProfileRequest, opts ...grpc.CallOption) (*creapptive_message.DeletePrivilegeProfileReply, error) {
	out := new(creapptive_message.DeletePrivilegeProfileReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/DeletePrivilegeProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetLocationTree(ctx context.Context, in *creapptive_message.GetLocationTreeRequest, opts ...grpc.CallOption) (*creapptive_message.GetLocationTreeReply, error) {
	out := new(creapptive_message.GetLocationTreeReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetLocationTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateLocationTree(ctx context.Context, in *creapptive_message.UpdateLocationTreeRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateLocationTreeReply, error) {
	out := new(creapptive_message.UpdateLocationTreeReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateLocationTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetScopeTree(ctx context.Context, in *creapptive_message.GetScopeTreeRequest, opts ...grpc.CallOption) (*creapptive_message.GetScopeTreeReply, error) {
	out := new(creapptive_message.GetScopeTreeReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/GetScopeTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateScopeTree(ctx context.Context, in *creapptive_message.UpdateScopeTreeRequest, opts ...grpc.CallOption) (*creapptive_message.UpdateScopeTreeReply, error) {
	out := new(creapptive_message.UpdateScopeTreeReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateScopeTree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ChangeVersion(ctx context.Context, in *creapptive_message.ChangeVersionRequest, opts ...grpc.CallOption) (*creapptive_message.ChangeVersionReply, error) {
	out := new(creapptive_message.ChangeVersionReply)
	err := grpc.Invoke(ctx, "/creapptive.api.Apigateway/ChangeVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Apigateway service

type ApigatewayServer interface {
	Login(context.Context, *creapptive_message.LoginRequest) (*creapptive_message.LoginReply, error)
	CreateUser(context.Context, *creapptive_message.CreateUserRequest) (*creapptive_message.CreateUserReply, error)
	GetUsers(context.Context, *creapptive_message.GetUsersRequest) (*creapptive_message.GetUsersReply, error)
	GetUserByID(context.Context, *creapptive_message.GetUserByIDRequest) (*creapptive_message.GetUserByIDReply, error)
	UpdateUser(context.Context, *creapptive_message.UpdateUserRequest) (*creapptive_message.UpdateUserReply, error)
	DeleteUser(context.Context, *creapptive_message.DeleteUserRequest) (*creapptive_message.DeleteUserReply, error)
	ChangePassword(context.Context, *creapptive_message.ChangePasswordRequest) (*creapptive_message.ChangePasswordReply, error)
	ResetPassword(context.Context, *creapptive_message.ResetPasswordRequest) (*creapptive_message.ResetPasswordReply, error)
	GetMyself(context.Context, *creapptive_message.GetMyselfRequest) (*creapptive_message.GetMyselfReply, error)
	CreatePrivilegeProfile(context.Context, *creapptive_message.CreatePrivilegeProfileRequest) (*creapptive_message.CreatePrivilegeProfileReply, error)
	GetPrivilegeProfiles(context.Context, *creapptive_message.GetPrivilegeProfilesRequest) (*creapptive_message.GetPrivilegeProfilesReply, error)
	GetPrivilegeProfileByID(context.Context, *creapptive_message.GetPrivilegeProfileByIDRequest) (*creapptive_message.GetPrivilegeProfileByIDReply, error)
	UpdatePrivilegeProfile(context.Context, *creapptive_message.UpdatePrivilegeProfileRequest) (*creapptive_message.UpdatePrivilegeProfileReply, error)
	DeletePrivilegeProfile(context.Context, *creapptive_message.DeletePrivilegeProfileRequest) (*creapptive_message.DeletePrivilegeProfileReply, error)
	GetLocationTree(context.Context, *creapptive_message.GetLocationTreeRequest) (*creapptive_message.GetLocationTreeReply, error)
	UpdateLocationTree(context.Context, *creapptive_message.UpdateLocationTreeRequest) (*creapptive_message.UpdateLocationTreeReply, error)
	GetScopeTree(context.Context, *creapptive_message.GetScopeTreeRequest) (*creapptive_message.GetScopeTreeReply, error)
	UpdateScopeTree(context.Context, *creapptive_message.UpdateScopeTreeRequest) (*creapptive_message.UpdateScopeTreeReply, error)
	ChangeVersion(context.Context, *creapptive_message.ChangeVersionRequest) (*creapptive_message.ChangeVersionReply, error)
}

func RegisterApigatewayServer(s *grpc.Server, srv ApigatewayServer) {
	s.RegisterService(&_Apigateway_serviceDesc, srv)
}

func _Apigateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).Login(ctx, req.(*creapptive_message.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).CreateUser(ctx, req.(*creapptive_message.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetUsers(ctx, req.(*creapptive_message.GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetUserByID(ctx, req.(*creapptive_message.GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateUser(ctx, req.(*creapptive_message.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).DeleteUser(ctx, req.(*creapptive_message.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ChangePassword(ctx, req.(*creapptive_message.ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ResetPassword(ctx, req.(*creapptive_message.ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetMyself_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetMyselfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetMyself(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetMyself",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetMyself(ctx, req.(*creapptive_message.GetMyselfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_CreatePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.CreatePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).CreatePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/CreatePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).CreatePrivilegeProfile(ctx, req.(*creapptive_message.CreatePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetPrivilegeProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetPrivilegeProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetPrivilegeProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetPrivilegeProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetPrivilegeProfiles(ctx, req.(*creapptive_message.GetPrivilegeProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetPrivilegeProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetPrivilegeProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetPrivilegeProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetPrivilegeProfileByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetPrivilegeProfileByID(ctx, req.(*creapptive_message.GetPrivilegeProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdatePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.UpdatePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdatePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdatePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdatePrivilegeProfile(ctx, req.(*creapptive_message.UpdatePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_DeletePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.DeletePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).DeletePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/DeletePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).DeletePrivilegeProfile(ctx, req.(*creapptive_message.DeletePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetLocationTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetLocationTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetLocationTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetLocationTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetLocationTree(ctx, req.(*creapptive_message.GetLocationTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateLocationTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.UpdateLocationTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateLocationTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateLocationTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateLocationTree(ctx, req.(*creapptive_message.UpdateLocationTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetScopeTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.GetScopeTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetScopeTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetScopeTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetScopeTree(ctx, req.(*creapptive_message.GetScopeTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateScopeTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.UpdateScopeTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateScopeTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateScopeTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateScopeTree(ctx, req.(*creapptive_message.UpdateScopeTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ChangeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(creapptive_message.ChangeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ChangeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ChangeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ChangeVersion(ctx, req.(*creapptive_message.ChangeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Apigateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "creapptive.api.Apigateway",
	HandlerType: (*ApigatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Apigateway_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Apigateway_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Apigateway_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _Apigateway_GetUserByID_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Apigateway_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Apigateway_DeleteUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Apigateway_ChangePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Apigateway_ResetPassword_Handler,
		},
		{
			MethodName: "GetMyself",
			Handler:    _Apigateway_GetMyself_Handler,
		},
		{
			MethodName: "CreatePrivilegeProfile",
			Handler:    _Apigateway_CreatePrivilegeProfile_Handler,
		},
		{
			MethodName: "GetPrivilegeProfiles",
			Handler:    _Apigateway_GetPrivilegeProfiles_Handler,
		},
		{
			MethodName: "GetPrivilegeProfileByID",
			Handler:    _Apigateway_GetPrivilegeProfileByID_Handler,
		},
		{
			MethodName: "UpdatePrivilegeProfile",
			Handler:    _Apigateway_UpdatePrivilegeProfile_Handler,
		},
		{
			MethodName: "DeletePrivilegeProfile",
			Handler:    _Apigateway_DeletePrivilegeProfile_Handler,
		},
		{
			MethodName: "GetLocationTree",
			Handler:    _Apigateway_GetLocationTree_Handler,
		},
		{
			MethodName: "UpdateLocationTree",
			Handler:    _Apigateway_UpdateLocationTree_Handler,
		},
		{
			MethodName: "GetScopeTree",
			Handler:    _Apigateway_GetScopeTree_Handler,
		},
		{
			MethodName: "UpdateScopeTree",
			Handler:    _Apigateway_UpdateScopeTree_Handler,
		},
		{
			MethodName: "ChangeVersion",
			Handler:    _Apigateway_ChangeVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigateway.proto",
}

func init() { proto.RegisterFile("apigateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4f, 0x73, 0xe3, 0x34,
	0x18, 0x87, 0xc7, 0x2d, 0x2c, 0xac, 0xd8, 0xb6, 0xa9, 0x08, 0xed, 0x92, 0x6e, 0xc1, 0x78, 0x69,
	0x37, 0x84, 0x49, 0xdc, 0x0d, 0x3d, 0x95, 0x0b, 0xdd, 0xdd, 0x99, 0x4c, 0x67, 0xb6, 0x43, 0x27,
	0x65, 0x39, 0x70, 0x13, 0xce, 0x5b, 0x47, 0x3b, 0x8e, 0x24, 0x2c, 0xb9, 0x21, 0xcc, 0x70, 0x81,
	0xe1, 0xc0, 0x8d, 0x3f, 0x37, 0xb8, 0xc3, 0x07, 0xe2, 0x0b, 0x70, 0xe0, 0x83, 0x30, 0x92, 0xe2,
	0xda, 0x49, 0x6c, 0xd7, 0x7b, 0x6a, 0x27, 0xef, 0x23, 0xfd, 0x1e, 0x4b, 0xf2, 0x2b, 0xa3, 0x06,
	0x11, 0x34, 0x24, 0x0a, 0xa6, 0x64, 0xd6, 0x13, 0x31, 0x57, 0x1c, 0x6f, 0x06, 0x31, 0x10, 0x21,
	0x14, 0xbd, 0x86, 0x1e, 0x11, 0xb4, 0xb5, 0x31, 0x01, 0x29, 0x49, 0x08, 0xb6, 0xdc, 0x7a, 0x10,
	0x72, 0x1e, 0x46, 0xe0, 0x13, 0x41, 0x7d, 0xc2, 0x18, 0x57, 0x44, 0x51, 0xce, 0xe4, 0xbc, 0x6a,
	0xff, 0x04, 0xdd, 0x10, 0x58, 0x97, 0x0b, 0x60, 0x44, 0xd0, 0xeb, 0xbe, 0xcf, 0x85, 0x61, 0x56,
	0x79, 0xef, 0x00, 0x6d, 0x9f, 0xde, 0x08, 0x9c, 0xdb, 0x20, 0xdc, 0x40, 0xeb, 0x92, 0xcc, 0xee,
	0x3b, 0xae, 0xd3, 0xbe, 0x3b, 0xd4, 0xff, 0xf6, 0x7f, 0x6e, 0x22, 0x94, 0x71, 0x78, 0x8c, 0x5e,
	0x7f, 0xce, 0x43, 0xca, 0xb0, 0xdb, 0xcb, 0xc9, 0xa6, 0x9e, 0xa6, 0x34, 0x84, 0x6f, 0x12, 0x90,
	0xaa, 0xf5, 0x5e, 0x05, 0x21, 0xa2, 0x99, 0xb7, 0xff, 0xc3, 0x3f, 0xff, 0xfd, 0xbe, 0xb6, 0xeb,
	0x61, 0xfb, 0x40, 0x41, 0xc0, 0x13, 0xa6, 0xfc, 0x48, 0x03, 0x27, 0x4e, 0x07, 0x27, 0x08, 0x3d,
	0x8d, 0x81, 0x28, 0x78, 0x21, 0x21, 0xc6, 0x07, 0x45, 0x93, 0x65, 0xf5, 0x34, 0xf3, 0xe1, 0x6d,
	0x98, 0x0e, 0xde, 0x33, 0xc1, 0xef, 0x78, 0x0d, 0x13, 0x9c, 0x48, 0x88, 0xfd, 0xc0, 0x20, 0x3a,
	0xf6, 0x25, 0x7a, 0x73, 0x00, 0x4a, 0xc3, 0x12, 0x17, 0xce, 0x96, 0x56, 0xd3, 0xc8, 0x0f, 0xaa,
	0x21, 0x1d, 0xb8, 0x63, 0x02, 0x1b, 0x78, 0x33, 0x0b, 0xa4, 0xec, 0x8a, 0x63, 0x89, 0xde, 0x9a,
	0x83, 0x4f, 0x66, 0x67, 0xcf, 0xf0, 0x61, 0xc5, 0x4c, 0x1a, 0x48, 0x13, 0x3f, 0xbc, 0x95, 0xcb,
	0x85, 0x7a, 0xcb, 0xa1, 0x09, 0x42, 0x2f, 0xc4, 0xa8, 0x72, 0x5d, 0xb3, 0x7a, 0xe5, 0xba, 0xe6,
	0xb1, 0x92, 0x75, 0x4d, 0x0c, 0x32, 0xdf, 0xce, 0x67, 0x10, 0x41, 0x55, 0x6c, 0x56, 0xaf, 0x8c,
	0xcd, 0x63, 0x25, 0xb1, 0x23, 0x83, 0xe8, 0xd8, 0x1f, 0x1d, 0xb4, 0xf9, 0x74, 0x4c, 0x58, 0x08,
	0x17, 0x44, 0xca, 0x29, 0x8f, 0x47, 0xf8, 0xa3, 0xc2, 0x33, 0xb2, 0xc0, 0xa4, 0xf9, 0x8f, 0xea,
	0xa0, 0xab, 0x67, 0xd9, 0x38, 0x88, 0x39, 0xa0, 0x2d, 0xbe, 0x47, 0x1b, 0x43, 0x90, 0xa0, 0x6e,
	0x1c, 0xda, 0x45, 0x13, 0x2f, 0x20, 0xa9, 0xc2, 0x61, 0x0d, 0x52, 0x1b, 0xb4, 0x8c, 0x41, 0xd3,
	0xdb, 0xca, 0x0c, 0x62, 0x4d, 0xe9, 0x78, 0x8e, 0xee, 0x0e, 0x40, 0x9d, 0xcf, 0x24, 0x44, 0x57,
	0xb8, 0xec, 0xf4, 0xd8, 0x72, 0x1a, 0xeb, 0xdd, 0x42, 0xe9, 0xc8, 0xfb, 0x26, 0x12, 0xe3, 0xdc,
	0xc2, 0x4f, 0x6c, 0xc6, 0x5f, 0x0e, 0xda, 0xb1, 0x6f, 0xdd, 0x45, 0x4c, 0xaf, 0x69, 0x04, 0x21,
	0x5c, 0xc4, 0xfc, 0x8a, 0x46, 0x80, 0x1f, 0x97, 0xbf, 0xa1, 0xcb, 0x6c, 0xea, 0xe2, 0xbf, 0xca,
	0x10, 0x2d, 0xd6, 0x36, 0x62, 0x9e, 0xb7, 0x6f, 0xc4, 0x44, 0xca, 0x74, 0x85, 0x85, 0x72, 0x6f,
	0xfb, 0x9f, 0x0e, 0x6a, 0x0e, 0x40, 0x2d, 0x4f, 0x23, 0xb1, 0x5f, 0xf2, 0xfc, 0x2b, 0x64, 0x2a,
	0xd9, 0xad, 0x3f, 0x40, 0x2b, 0x3e, 0x34, 0x8a, 0xfb, 0x78, 0xaf, 0x44, 0xd1, 0xbc, 0xaa, 0x7f,
	0x3b, 0x68, 0xb7, 0x60, 0x0a, 0xd3, 0x2c, 0xfa, 0x35, 0xf3, 0xf2, 0x8d, 0xe3, 0xe8, 0x95, 0xc6,
	0x68, 0xcd, 0x43, 0xa3, 0xe9, 0x7a, 0x55, 0x9a, 0x7a, 0x1d, 0xf5, 0x86, 0xdb, 0x76, 0x50, 0x6f,
	0xc3, 0x8b, 0xd9, 0xca, 0x0d, 0x2f, 0x1b, 0x52, 0x67, 0xc3, 0xb3, 0x36, 0xa4, 0x45, 0x6d, 0x03,
	0xa9, 0x27, 0x5a, 0xcc, 0x56, 0x8a, 0x96, 0x0d, 0xa9, 0x23, 0xba, 0xd0, 0xb8, 0xb6, 0x06, 0xa0,
	0x9e, 0xf3, 0xc0, 0xdc, 0xda, 0x5f, 0xc4, 0x00, 0xb8, 0x53, 0xb2, 0x7f, 0x79, 0x28, 0x55, 0x6b,
	0xd7, 0x62, 0x73, 0x9d, 0x03, 0xdb, 0xde, 0x15, 0xcd, 0xeb, 0xf6, 0x04, 0xfe, 0xea, 0x20, 0x6c,
	0x17, 0x7e, 0x41, 0xa4, 0x5b, 0xbe, 0x41, 0x45, 0x2e, 0x1f, 0xd7, 0xc5, 0xb5, 0xce, 0xfb, 0x46,
	0xe7, 0x5d, 0xaf, 0xb9, 0xa8, 0x93, 0x6d, 0xe1, 0x14, 0xdd, 0x1b, 0x80, 0xba, 0x0c, 0xb8, 0x00,
	0x23, 0xf3, 0xa8, 0xe4, 0x49, 0x6f, 0x88, 0x54, 0xe3, 0xe0, 0x76, 0x50, 0x0b, 0xec, 0x1a, 0x81,
	0x6d, 0x6c, 0x3b, 0xa9, 0xd4, 0x45, 0xbb, 0x18, 0x3f, 0x39, 0x68, 0xcb, 0x5a, 0x67, 0xe1, 0x9d,
	0xf2, 0x47, 0x5b, 0xc9, 0x6f, 0xd7, 0x62, 0xb5, 0xc2, 0x03, 0xa3, 0xb0, 0xe3, 0x6d, 0xe7, 0x14,
	0xf2, 0x0b, 0xb0, 0x61, 0xef, 0xa0, 0x2f, 0x21, 0x96, 0x94, 0xb3, 0xe2, 0xdb, 0x64, 0x01, 0xa9,
	0xbc, 0x4d, 0x96, 0x48, 0x2d, 0xd0, 0x34, 0x02, 0x9b, 0xde, 0x3d, 0x23, 0x70, 0x6d, 0x4b, 0x4f,
	0x7e, 0x59, 0xfb, 0xed, 0xf4, 0x5f, 0x07, 0x7f, 0x87, 0xbc, 0xb3, 0xf3, 0x4b, 0xf7, 0x12, 0x82,
	0x24, 0xa6, 0x6a, 0xe6, 0x9e, 0x13, 0x46, 0x42, 0x98, 0x00, 0x53, 0xee, 0xe5, 0x4c, 0x2a, 0x98,
	0xb8, 0xa7, 0x17, 0x67, 0xde, 0xe7, 0x68, 0x2f, 0x97, 0x15, 0xf0, 0x89, 0x4f, 0x27, 0xb2, 0x2b,
	0xe7, 0x83, 0xf0, 0xde, 0x58, 0x29, 0x21, 0x4f, 0x7c, 0x7f, 0x3a, 0x9d, 0xf6, 0x96, 0xc0, 0xd6,
	0xdb, 0x23, 0x98, 0xf0, 0xcf, 0x16, 0x7f, 0xed, 0xaf, 0x3f, 0xee, 0x1d, 0x75, 0x1c, 0xa7, 0xdf,
	0x20, 0x42, 0x44, 0x74, 0x7e, 0x2c, 0x5e, 0x4a, 0xce, 0x4e, 0x56, 0x7e, 0x19, 0x7e, 0x8a, 0xd6,
	0x8f, 0x8f, 0x8e, 0xf1, 0x31, 0xea, 0x0c, 0x41, 0x25, 0x31, 0x83, 0x91, 0x3b, 0x1d, 0x03, 0x73,
	0xd5, 0x18, 0xdc, 0x18, 0x24, 0x4f, 0xe2, 0x00, 0xdc, 0x11, 0x07, 0xe9, 0x32, 0xae, 0x5c, 0xf8,
	0x96, 0x4a, 0xd5, 0xc3, 0x77, 0xd0, 0x6b, 0x7f, 0xac, 0x39, 0x6f, 0x7c, 0xd5, 0xa9, 0xf0, 0xb6,
	0xdf, 0xaa, 0x37, 0xdf, 0xc3, 0x5f, 0xdf, 0x31, 0x1f, 0xd3, 0x9f, 0xfc, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0x23, 0x13, 0x51, 0x7a, 0xcd, 0x0b, 0x00, 0x00,
}
