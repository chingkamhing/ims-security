// Code generated by protoc-gen-go. DO NOT EDIT.
// source: apigateway.proto

package apigateway

import (
	context "context"
	message "creapptive.com/ims-security/api/message"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ApigatewayMessage struct {
	Say                  string   `protobuf:"bytes,1,opt,name=say,proto3" json:"say,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApigatewayMessage) Reset()         { *m = ApigatewayMessage{} }
func (m *ApigatewayMessage) String() string { return proto.CompactTextString(m) }
func (*ApigatewayMessage) ProtoMessage()    {}
func (*ApigatewayMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d18910f95c6106b6, []int{0}
}

func (m *ApigatewayMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApigatewayMessage.Unmarshal(m, b)
}
func (m *ApigatewayMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApigatewayMessage.Marshal(b, m, deterministic)
}
func (m *ApigatewayMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApigatewayMessage.Merge(m, src)
}
func (m *ApigatewayMessage) XXX_Size() int {
	return xxx_messageInfo_ApigatewayMessage.Size(m)
}
func (m *ApigatewayMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ApigatewayMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ApigatewayMessage proto.InternalMessageInfo

func (m *ApigatewayMessage) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

func init() {
	proto.RegisterType((*ApigatewayMessage)(nil), "creapptive.api.ApigatewayMessage")
}

func init() { proto.RegisterFile("apigateway.proto", fileDescriptor_d18910f95c6106b6) }

var fileDescriptor_d18910f95c6106b6 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4f, 0x73, 0xe3, 0x34,
	0x18, 0x87, 0xc7, 0x2d, 0x2c, 0xac, 0xd8, 0xb6, 0xa9, 0x08, 0xed, 0x92, 0x6e, 0xc1, 0x78, 0x69,
	0x37, 0x84, 0x49, 0xdc, 0x0d, 0x3d, 0x95, 0x0b, 0xdd, 0xdd, 0x99, 0x4c, 0x67, 0xb6, 0x43, 0x27,
	0x65, 0x39, 0x70, 0x13, 0xce, 0x5b, 0x47, 0x3b, 0x8e, 0x24, 0x2c, 0xb9, 0x21, 0xcc, 0x70, 0x81,
	0xe1, 0xc0, 0x8d, 0x3f, 0x37, 0xb8, 0xc3, 0x07, 0xe2, 0x0b, 0x70, 0xe0, 0x83, 0x30, 0x92, 0xe2,
	0xda, 0x49, 0x6c, 0xd7, 0x7b, 0x6a, 0x27, 0xef, 0x23, 0xfd, 0x1e, 0x4b, 0xf2, 0x2b, 0xa3, 0x06,
	0x11, 0x34, 0x24, 0x0a, 0xa6, 0x64, 0xd6, 0x13, 0x31, 0x57, 0x1c, 0x6f, 0x06, 0x31, 0x10, 0x21,
	0x14, 0xbd, 0x86, 0x1e, 0x11, 0xb4, 0xb5, 0x31, 0x01, 0x29, 0x49, 0x08, 0xb6, 0xdc, 0x7a, 0x10,
	0x72, 0x1e, 0x46, 0xe0, 0x13, 0x41, 0x7d, 0xc2, 0x18, 0x57, 0x44, 0x51, 0xce, 0xe4, 0xbc, 0x6a,
	0xff, 0x04, 0xdd, 0x10, 0x58, 0x97, 0x0b, 0x60, 0x44, 0xd0, 0xeb, 0xbe, 0xcf, 0x85, 0x61, 0x56,
	0x79, 0xef, 0x00, 0x6d, 0x9f, 0xde, 0x08, 0x9c, 0xdb, 0x20, 0xdc, 0x40, 0xeb, 0x92, 0xcc, 0xee,
	0x3b, 0xae, 0xd3, 0xbe, 0x3b, 0xd4, 0xff, 0xf6, 0x7f, 0x6e, 0x22, 0x94, 0x71, 0x78, 0x8c, 0x5e,
	0x7f, 0xce, 0x43, 0xca, 0xb0, 0xdb, 0xcb, 0xc9, 0xa6, 0x9e, 0xa6, 0x34, 0x84, 0x6f, 0x12, 0x90,
	0xaa, 0xf5, 0x5e, 0x05, 0x21, 0xa2, 0x99, 0xb7, 0xff, 0xc3, 0x3f, 0xff, 0xfd, 0xbe, 0xb6, 0xeb,
	0x61, 0xfb, 0x40, 0x41, 0xc0, 0x13, 0xa6, 0xfc, 0x48, 0x03, 0x27, 0x4e, 0x07, 0x27, 0x08, 0x3d,
	0x8d, 0x81, 0x28, 0x78, 0x21, 0x21, 0xc6, 0x07, 0x45, 0x93, 0x65, 0xf5, 0x34, 0xf3, 0xe1, 0x6d,
	0x98, 0x0e, 0xde, 0x33, 0xc1, 0xef, 0x78, 0x0d, 0x13, 0x9c, 0x48, 0x88, 0xfd, 0xc0, 0x20, 0x3a,
	0xf6, 0x25, 0x7a, 0x73, 0x00, 0x4a, 0xc3, 0x12, 0x17, 0xce, 0x96, 0x56, 0xd3, 0xc8, 0x0f, 0xaa,
	0x21, 0x1d, 0xb8, 0x63, 0x02, 0x1b, 0x78, 0x33, 0x0b, 0xa4, 0xec, 0x8a, 0x63, 0x89, 0xde, 0x9a,
	0x83, 0x4f, 0x66, 0x67, 0xcf, 0xf0, 0x61, 0xc5, 0x4c, 0x1a, 0x48, 0x13, 0x3f, 0xbc, 0x95, 0xcb,
	0x85, 0x7a, 0xcb, 0xa1, 0x09, 0x42, 0x2f, 0xc4, 0xa8, 0x72, 0x5d, 0xb3, 0x7a, 0xe5, 0xba, 0xe6,
	0xb1, 0x92, 0x75, 0x4d, 0x0c, 0x32, 0xdf, 0xce, 0x67, 0x10, 0x41, 0x55, 0x6c, 0x56, 0xaf, 0x8c,
	0xcd, 0x63, 0x25, 0xb1, 0x23, 0x83, 0xe8, 0xd8, 0x1f, 0x1d, 0xb4, 0xf9, 0x74, 0x4c, 0x58, 0x08,
	0x17, 0x44, 0xca, 0x29, 0x8f, 0x47, 0xf8, 0xa3, 0xc2, 0x33, 0xb2, 0xc0, 0xa4, 0xf9, 0x8f, 0xea,
	0xa0, 0xab, 0x67, 0xd9, 0x38, 0x88, 0x39, 0xa0, 0x2d, 0xbe, 0x47, 0x1b, 0x43, 0x90, 0xa0, 0x6e,
	0x1c, 0xda, 0x45, 0x13, 0x2f, 0x20, 0xa9, 0xc2, 0x61, 0x0d, 0x52, 0x1b, 0xb4, 0x8c, 0x41, 0xd3,
	0xdb, 0xca, 0x0c, 0x62, 0x4d, 0xe9, 0x78, 0x8e, 0xee, 0x0e, 0x40, 0x9d, 0xcf, 0x24, 0x44, 0x57,
	0xb8, 0xec, 0xf4, 0xd8, 0x72, 0x1a, 0xeb, 0xdd, 0x42, 0xe9, 0xc8, 0xfb, 0x26, 0x12, 0xe3, 0xdc,
	0xc2, 0x4f, 0x6c, 0xc6, 0x5f, 0x0e, 0xda, 0xb1, 0x6f, 0xdd, 0x45, 0x4c, 0xaf, 0x69, 0x04, 0x21,
	0x5c, 0xc4, 0xfc, 0x8a, 0x46, 0x80, 0x1f, 0x97, 0xbf, 0xa1, 0xcb, 0x6c, 0xea, 0xe2, 0xbf, 0xca,
	0x10, 0x2d, 0xd6, 0x36, 0x62, 0x9e, 0xb7, 0x6f, 0xc4, 0x44, 0xca, 0x74, 0x85, 0x85, 0x72, 0x6f,
	0xfb, 0x9f, 0x0e, 0x6a, 0x0e, 0x40, 0x2d, 0x4f, 0x23, 0xb1, 0x5f, 0xf2, 0xfc, 0x2b, 0x64, 0x2a,
	0xd9, 0xad, 0x3f, 0x40, 0x2b, 0x3e, 0x34, 0x8a, 0xfb, 0x78, 0xaf, 0x44, 0xd1, 0xbc, 0xaa, 0x7f,
	0x3b, 0x68, 0xb7, 0x60, 0x0a, 0xd3, 0x2c, 0xfa, 0x35, 0xf3, 0xf2, 0x8d, 0xe3, 0xe8, 0x95, 0xc6,
	0x68, 0xcd, 0x43, 0xa3, 0xe9, 0x7a, 0x55, 0x9a, 0x7a, 0x1d, 0xf5, 0x86, 0xdb, 0x76, 0x50, 0x6f,
	0xc3, 0x8b, 0xd9, 0xca, 0x0d, 0x2f, 0x1b, 0x52, 0x67, 0xc3, 0xb3, 0x36, 0xa4, 0x45, 0x6d, 0x03,
	0xa9, 0x27, 0x5a, 0xcc, 0x56, 0x8a, 0x96, 0x0d, 0xa9, 0x23, 0xba, 0xd0, 0xb8, 0xb6, 0x06, 0xa0,
	0x9e, 0xf3, 0xc0, 0xdc, 0xda, 0x5f, 0xc4, 0x00, 0xb8, 0x53, 0xb2, 0x7f, 0x79, 0x28, 0x55, 0x6b,
	0xd7, 0x62, 0x73, 0x9d, 0x03, 0xdb, 0xde, 0x15, 0xcd, 0xeb, 0xf6, 0x04, 0xfe, 0xea, 0x20, 0x6c,
	0x17, 0x7e, 0x41, 0xa4, 0x5b, 0xbe, 0x41, 0x45, 0x2e, 0x1f, 0xd7, 0xc5, 0xb5, 0xce, 0xfb, 0x46,
	0xe7, 0x5d, 0xaf, 0xb9, 0xa8, 0x93, 0x6d, 0xe1, 0x14, 0xdd, 0x1b, 0x80, 0xba, 0x0c, 0xb8, 0x00,
	0x23, 0xf3, 0xa8, 0xe4, 0x49, 0x6f, 0x88, 0x54, 0xe3, 0xe0, 0x76, 0x50, 0x0b, 0xec, 0x1a, 0x81,
	0x6d, 0x6c, 0x3b, 0xa9, 0xd4, 0x45, 0xbb, 0x18, 0x3f, 0x39, 0x68, 0xcb, 0x5a, 0x67, 0xe1, 0x9d,
	0xf2, 0x47, 0x5b, 0xc9, 0x6f, 0xd7, 0x62, 0xb5, 0xc2, 0x03, 0xa3, 0xb0, 0xe3, 0x6d, 0xe7, 0x14,
	0xf2, 0x0b, 0xb0, 0x61, 0xef, 0xa0, 0x2f, 0x21, 0x96, 0x94, 0xb3, 0xe2, 0xdb, 0x64, 0x01, 0xa9,
	0xbc, 0x4d, 0x96, 0x48, 0x2d, 0xd0, 0x34, 0x02, 0x9b, 0xde, 0x3d, 0x23, 0x70, 0x6d, 0x4b, 0x4f,
	0x7e, 0x59, 0xfb, 0xaa, 0x93, 0x1b, 0x1f, 0xf0, 0x89, 0x4f, 0x27, 0xb2, 0x2b, 0x21, 0x48, 0x62,
	0xaa, 0x66, 0xf6, 0x3b, 0xee, 0xe6, 0x5b, 0xf1, 0xb7, 0xd3, 0x7f, 0x1d, 0xfc, 0x1d, 0xf2, 0xce,
	0xce, 0x2f, 0xdd, 0xcb, 0x39, 0xe2, 0x9e, 0x13, 0x46, 0x42, 0x98, 0x00, 0x53, 0xee, 0xe5, 0x4c,
	0x2a, 0x98, 0xb8, 0xa7, 0x17, 0x67, 0xde, 0xe7, 0x68, 0xaf, 0x62, 0x5e, 0xbc, 0x37, 0x56, 0x4a,
	0xc8, 0x13, 0xdf, 0x9f, 0x4e, 0xa7, 0xbd, 0x25, 0xb0, 0xf5, 0xf6, 0x08, 0x26, 0xfc, 0xb3, 0xc5,
	0x5f, 0xfb, 0xeb, 0x8f, 0x7b, 0x47, 0x1d, 0xc7, 0xe9, 0x37, 0x88, 0x10, 0x11, 0x9d, 0x1f, 0xa1,
	0x97, 0x92, 0xb3, 0x93, 0x95, 0x5f, 0x86, 0x9f, 0xa2, 0xf5, 0xe3, 0xa3, 0x63, 0x7c, 0x8c, 0x3a,
	0x43, 0x50, 0x49, 0xcc, 0x60, 0xe4, 0x4e, 0xc7, 0xc0, 0x5c, 0x35, 0x06, 0x37, 0x06, 0xc9, 0x93,
	0x38, 0x00, 0x77, 0xc4, 0x41, 0xba, 0x8c, 0x2b, 0x17, 0xbe, 0xa5, 0x52, 0xf5, 0xf0, 0x1d, 0xf4,
	0xda, 0x1f, 0x6b, 0xce, 0x1b, 0x5f, 0xdf, 0x31, 0x1f, 0xd3, 0x9f, 0xfc, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xed, 0x90, 0xd4, 0x32, 0xcd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApigatewayClient is the client API for Apigateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApigatewayClient interface {
	Login(ctx context.Context, in *message.LoginRequest, opts ...grpc.CallOption) (*message.LoginReply, error)
	CreateUser(ctx context.Context, in *message.CreateUserRequest, opts ...grpc.CallOption) (*message.CreateUserReply, error)
	GetUsers(ctx context.Context, in *message.GetUsersRequest, opts ...grpc.CallOption) (*message.GetUsersReply, error)
	GetUserByID(ctx context.Context, in *message.GetUserByIDRequest, opts ...grpc.CallOption) (*message.GetUserByIDReply, error)
	UpdateUser(ctx context.Context, in *message.UpdateUserRequest, opts ...grpc.CallOption) (*message.UpdateUserReply, error)
	DeleteUser(ctx context.Context, in *message.DeleteUserRequest, opts ...grpc.CallOption) (*message.DeleteUserReply, error)
	ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, opts ...grpc.CallOption) (*message.ChangePasswordReply, error)
	ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, opts ...grpc.CallOption) (*message.ResetPasswordReply, error)
	GetMyself(ctx context.Context, in *message.GetMyselfRequest, opts ...grpc.CallOption) (*message.GetMyselfReply, error)
	CreatePrivilegeProfile(ctx context.Context, in *message.CreatePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.CreatePrivilegeProfileReply, error)
	GetPrivilegeProfiles(ctx context.Context, in *message.GetPrivilegeProfilesRequest, opts ...grpc.CallOption) (*message.GetPrivilegeProfilesReply, error)
	GetPrivilegeProfileByID(ctx context.Context, in *message.GetPrivilegeProfileByIDRequest, opts ...grpc.CallOption) (*message.GetPrivilegeProfileByIDReply, error)
	UpdatePrivilegeProfile(ctx context.Context, in *message.UpdatePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.UpdatePrivilegeProfileReply, error)
	DeletePrivilegeProfile(ctx context.Context, in *message.DeletePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.DeletePrivilegeProfileReply, error)
	GetLocationTree(ctx context.Context, in *message.GetLocationTreeRequest, opts ...grpc.CallOption) (*message.GetLocationTreeReply, error)
	UpdateLocationTree(ctx context.Context, in *message.UpdateLocationTreeRequest, opts ...grpc.CallOption) (*message.UpdateLocationTreeReply, error)
	GetScopeTree(ctx context.Context, in *message.GetScopeTreeRequest, opts ...grpc.CallOption) (*message.GetScopeTreeReply, error)
	UpdateScopeTree(ctx context.Context, in *message.UpdateScopeTreeRequest, opts ...grpc.CallOption) (*message.UpdateScopeTreeReply, error)
	ChangeVersion(ctx context.Context, in *message.ChangeVersionRequest, opts ...grpc.CallOption) (*message.ChangeVersionReply, error)
}

type apigatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewApigatewayClient(cc grpc.ClientConnInterface) ApigatewayClient {
	return &apigatewayClient{cc}
}

func (c *apigatewayClient) Login(ctx context.Context, in *message.LoginRequest, opts ...grpc.CallOption) (*message.LoginReply, error) {
	out := new(message.LoginReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) CreateUser(ctx context.Context, in *message.CreateUserRequest, opts ...grpc.CallOption) (*message.CreateUserReply, error) {
	out := new(message.CreateUserReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetUsers(ctx context.Context, in *message.GetUsersRequest, opts ...grpc.CallOption) (*message.GetUsersReply, error) {
	out := new(message.GetUsersReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetUserByID(ctx context.Context, in *message.GetUserByIDRequest, opts ...grpc.CallOption) (*message.GetUserByIDReply, error) {
	out := new(message.GetUserByIDReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateUser(ctx context.Context, in *message.UpdateUserRequest, opts ...grpc.CallOption) (*message.UpdateUserReply, error) {
	out := new(message.UpdateUserReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) DeleteUser(ctx context.Context, in *message.DeleteUserRequest, opts ...grpc.CallOption) (*message.DeleteUserReply, error) {
	out := new(message.DeleteUserReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, opts ...grpc.CallOption) (*message.ChangePasswordReply, error) {
	out := new(message.ChangePasswordReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, opts ...grpc.CallOption) (*message.ResetPasswordReply, error) {
	out := new(message.ResetPasswordReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetMyself(ctx context.Context, in *message.GetMyselfRequest, opts ...grpc.CallOption) (*message.GetMyselfReply, error) {
	out := new(message.GetMyselfReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetMyself", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) CreatePrivilegeProfile(ctx context.Context, in *message.CreatePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.CreatePrivilegeProfileReply, error) {
	out := new(message.CreatePrivilegeProfileReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/CreatePrivilegeProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetPrivilegeProfiles(ctx context.Context, in *message.GetPrivilegeProfilesRequest, opts ...grpc.CallOption) (*message.GetPrivilegeProfilesReply, error) {
	out := new(message.GetPrivilegeProfilesReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetPrivilegeProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetPrivilegeProfileByID(ctx context.Context, in *message.GetPrivilegeProfileByIDRequest, opts ...grpc.CallOption) (*message.GetPrivilegeProfileByIDReply, error) {
	out := new(message.GetPrivilegeProfileByIDReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetPrivilegeProfileByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdatePrivilegeProfile(ctx context.Context, in *message.UpdatePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.UpdatePrivilegeProfileReply, error) {
	out := new(message.UpdatePrivilegeProfileReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/UpdatePrivilegeProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) DeletePrivilegeProfile(ctx context.Context, in *message.DeletePrivilegeProfileRequest, opts ...grpc.CallOption) (*message.DeletePrivilegeProfileReply, error) {
	out := new(message.DeletePrivilegeProfileReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/DeletePrivilegeProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetLocationTree(ctx context.Context, in *message.GetLocationTreeRequest, opts ...grpc.CallOption) (*message.GetLocationTreeReply, error) {
	out := new(message.GetLocationTreeReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetLocationTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateLocationTree(ctx context.Context, in *message.UpdateLocationTreeRequest, opts ...grpc.CallOption) (*message.UpdateLocationTreeReply, error) {
	out := new(message.UpdateLocationTreeReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateLocationTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) GetScopeTree(ctx context.Context, in *message.GetScopeTreeRequest, opts ...grpc.CallOption) (*message.GetScopeTreeReply, error) {
	out := new(message.GetScopeTreeReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/GetScopeTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) UpdateScopeTree(ctx context.Context, in *message.UpdateScopeTreeRequest, opts ...grpc.CallOption) (*message.UpdateScopeTreeReply, error) {
	out := new(message.UpdateScopeTreeReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/UpdateScopeTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigatewayClient) ChangeVersion(ctx context.Context, in *message.ChangeVersionRequest, opts ...grpc.CallOption) (*message.ChangeVersionReply, error) {
	out := new(message.ChangeVersionReply)
	err := c.cc.Invoke(ctx, "/creapptive.api.Apigateway/ChangeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApigatewayServer is the server API for Apigateway service.
type ApigatewayServer interface {
	Login(context.Context, *message.LoginRequest) (*message.LoginReply, error)
	CreateUser(context.Context, *message.CreateUserRequest) (*message.CreateUserReply, error)
	GetUsers(context.Context, *message.GetUsersRequest) (*message.GetUsersReply, error)
	GetUserByID(context.Context, *message.GetUserByIDRequest) (*message.GetUserByIDReply, error)
	UpdateUser(context.Context, *message.UpdateUserRequest) (*message.UpdateUserReply, error)
	DeleteUser(context.Context, *message.DeleteUserRequest) (*message.DeleteUserReply, error)
	ChangePassword(context.Context, *message.ChangePasswordRequest) (*message.ChangePasswordReply, error)
	ResetPassword(context.Context, *message.ResetPasswordRequest) (*message.ResetPasswordReply, error)
	GetMyself(context.Context, *message.GetMyselfRequest) (*message.GetMyselfReply, error)
	CreatePrivilegeProfile(context.Context, *message.CreatePrivilegeProfileRequest) (*message.CreatePrivilegeProfileReply, error)
	GetPrivilegeProfiles(context.Context, *message.GetPrivilegeProfilesRequest) (*message.GetPrivilegeProfilesReply, error)
	GetPrivilegeProfileByID(context.Context, *message.GetPrivilegeProfileByIDRequest) (*message.GetPrivilegeProfileByIDReply, error)
	UpdatePrivilegeProfile(context.Context, *message.UpdatePrivilegeProfileRequest) (*message.UpdatePrivilegeProfileReply, error)
	DeletePrivilegeProfile(context.Context, *message.DeletePrivilegeProfileRequest) (*message.DeletePrivilegeProfileReply, error)
	GetLocationTree(context.Context, *message.GetLocationTreeRequest) (*message.GetLocationTreeReply, error)
	UpdateLocationTree(context.Context, *message.UpdateLocationTreeRequest) (*message.UpdateLocationTreeReply, error)
	GetScopeTree(context.Context, *message.GetScopeTreeRequest) (*message.GetScopeTreeReply, error)
	UpdateScopeTree(context.Context, *message.UpdateScopeTreeRequest) (*message.UpdateScopeTreeReply, error)
	ChangeVersion(context.Context, *message.ChangeVersionRequest) (*message.ChangeVersionReply, error)
}

// UnimplementedApigatewayServer can be embedded to have forward compatible implementations.
type UnimplementedApigatewayServer struct {
}

func (*UnimplementedApigatewayServer) Login(ctx context.Context, req *message.LoginRequest) (*message.LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedApigatewayServer) CreateUser(ctx context.Context, req *message.CreateUserRequest) (*message.CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedApigatewayServer) GetUsers(ctx context.Context, req *message.GetUsersRequest) (*message.GetUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedApigatewayServer) GetUserByID(ctx context.Context, req *message.GetUserByIDRequest) (*message.GetUserByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (*UnimplementedApigatewayServer) UpdateUser(ctx context.Context, req *message.UpdateUserRequest) (*message.UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedApigatewayServer) DeleteUser(ctx context.Context, req *message.DeleteUserRequest) (*message.DeleteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedApigatewayServer) ChangePassword(ctx context.Context, req *message.ChangePasswordRequest) (*message.ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedApigatewayServer) ResetPassword(ctx context.Context, req *message.ResetPasswordRequest) (*message.ResetPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedApigatewayServer) GetMyself(ctx context.Context, req *message.GetMyselfRequest) (*message.GetMyselfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyself not implemented")
}
func (*UnimplementedApigatewayServer) CreatePrivilegeProfile(ctx context.Context, req *message.CreatePrivilegeProfileRequest) (*message.CreatePrivilegeProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivilegeProfile not implemented")
}
func (*UnimplementedApigatewayServer) GetPrivilegeProfiles(ctx context.Context, req *message.GetPrivilegeProfilesRequest) (*message.GetPrivilegeProfilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegeProfiles not implemented")
}
func (*UnimplementedApigatewayServer) GetPrivilegeProfileByID(ctx context.Context, req *message.GetPrivilegeProfileByIDRequest) (*message.GetPrivilegeProfileByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegeProfileByID not implemented")
}
func (*UnimplementedApigatewayServer) UpdatePrivilegeProfile(ctx context.Context, req *message.UpdatePrivilegeProfileRequest) (*message.UpdatePrivilegeProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivilegeProfile not implemented")
}
func (*UnimplementedApigatewayServer) DeletePrivilegeProfile(ctx context.Context, req *message.DeletePrivilegeProfileRequest) (*message.DeletePrivilegeProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivilegeProfile not implemented")
}
func (*UnimplementedApigatewayServer) GetLocationTree(ctx context.Context, req *message.GetLocationTreeRequest) (*message.GetLocationTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationTree not implemented")
}
func (*UnimplementedApigatewayServer) UpdateLocationTree(ctx context.Context, req *message.UpdateLocationTreeRequest) (*message.UpdateLocationTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocationTree not implemented")
}
func (*UnimplementedApigatewayServer) GetScopeTree(ctx context.Context, req *message.GetScopeTreeRequest) (*message.GetScopeTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeTree not implemented")
}
func (*UnimplementedApigatewayServer) UpdateScopeTree(ctx context.Context, req *message.UpdateScopeTreeRequest) (*message.UpdateScopeTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScopeTree not implemented")
}
func (*UnimplementedApigatewayServer) ChangeVersion(ctx context.Context, req *message.ChangeVersionRequest) (*message.ChangeVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVersion not implemented")
}

func RegisterApigatewayServer(s *grpc.Server, srv ApigatewayServer) {
	s.RegisterService(&_Apigateway_serviceDesc, srv)
}

func _Apigateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).Login(ctx, req.(*message.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).CreateUser(ctx, req.(*message.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetUsers(ctx, req.(*message.GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetUserByID(ctx, req.(*message.GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateUser(ctx, req.(*message.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).DeleteUser(ctx, req.(*message.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ChangePassword(ctx, req.(*message.ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ResetPassword(ctx, req.(*message.ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetMyself_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetMyselfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetMyself(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetMyself",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetMyself(ctx, req.(*message.GetMyselfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_CreatePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CreatePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).CreatePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/CreatePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).CreatePrivilegeProfile(ctx, req.(*message.CreatePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetPrivilegeProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetPrivilegeProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetPrivilegeProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetPrivilegeProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetPrivilegeProfiles(ctx, req.(*message.GetPrivilegeProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetPrivilegeProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetPrivilegeProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetPrivilegeProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetPrivilegeProfileByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetPrivilegeProfileByID(ctx, req.(*message.GetPrivilegeProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdatePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UpdatePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdatePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdatePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdatePrivilegeProfile(ctx, req.(*message.UpdatePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_DeletePrivilegeProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.DeletePrivilegeProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).DeletePrivilegeProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/DeletePrivilegeProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).DeletePrivilegeProfile(ctx, req.(*message.DeletePrivilegeProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetLocationTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetLocationTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetLocationTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetLocationTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetLocationTree(ctx, req.(*message.GetLocationTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateLocationTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UpdateLocationTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateLocationTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateLocationTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateLocationTree(ctx, req.(*message.UpdateLocationTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_GetScopeTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetScopeTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).GetScopeTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/GetScopeTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).GetScopeTree(ctx, req.(*message.GetScopeTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_UpdateScopeTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.UpdateScopeTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).UpdateScopeTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/UpdateScopeTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).UpdateScopeTree(ctx, req.(*message.UpdateScopeTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigateway_ChangeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.ChangeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigatewayServer).ChangeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creapptive.api.Apigateway/ChangeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigatewayServer).ChangeVersion(ctx, req.(*message.ChangeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Apigateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "creapptive.api.Apigateway",
	HandlerType: (*ApigatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Apigateway_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Apigateway_CreateUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Apigateway_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _Apigateway_GetUserByID_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Apigateway_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Apigateway_DeleteUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Apigateway_ChangePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Apigateway_ResetPassword_Handler,
		},
		{
			MethodName: "GetMyself",
			Handler:    _Apigateway_GetMyself_Handler,
		},
		{
			MethodName: "CreatePrivilegeProfile",
			Handler:    _Apigateway_CreatePrivilegeProfile_Handler,
		},
		{
			MethodName: "GetPrivilegeProfiles",
			Handler:    _Apigateway_GetPrivilegeProfiles_Handler,
		},
		{
			MethodName: "GetPrivilegeProfileByID",
			Handler:    _Apigateway_GetPrivilegeProfileByID_Handler,
		},
		{
			MethodName: "UpdatePrivilegeProfile",
			Handler:    _Apigateway_UpdatePrivilegeProfile_Handler,
		},
		{
			MethodName: "DeletePrivilegeProfile",
			Handler:    _Apigateway_DeletePrivilegeProfile_Handler,
		},
		{
			MethodName: "GetLocationTree",
			Handler:    _Apigateway_GetLocationTree_Handler,
		},
		{
			MethodName: "UpdateLocationTree",
			Handler:    _Apigateway_UpdateLocationTree_Handler,
		},
		{
			MethodName: "GetScopeTree",
			Handler:    _Apigateway_GetScopeTree_Handler,
		},
		{
			MethodName: "UpdateScopeTree",
			Handler:    _Apigateway_UpdateScopeTree_Handler,
		},
		{
			MethodName: "ChangeVersion",
			Handler:    _Apigateway_ChangeVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigateway.proto",
}
