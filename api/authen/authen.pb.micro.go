// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authen.proto

package authen

import (
	message "creapptive.com/ims-security/api/message"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Authen service

func NewAuthenEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Authen service

type AuthenService interface {
	Login(ctx context.Context, in *message.LoginRequest, opts ...client.CallOption) (*AuthenLoginReply, error)
	ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, opts ...client.CallOption) (*message.ChangePasswordReply, error)
	ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, opts ...client.CallOption) (*message.ResetPasswordReply, error)
}

type authenService struct {
	c    client.Client
	name string
}

func NewAuthenService(name string, c client.Client) AuthenService {
	return &authenService{
		c:    c,
		name: name,
	}
}

func (c *authenService) Login(ctx context.Context, in *message.LoginRequest, opts ...client.CallOption) (*AuthenLoginReply, error) {
	req := c.c.NewRequest(c.name, "Authen.Login", in)
	out := new(AuthenLoginReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenService) ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, opts ...client.CallOption) (*message.ChangePasswordReply, error) {
	req := c.c.NewRequest(c.name, "Authen.ChangePassword", in)
	out := new(message.ChangePasswordReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenService) ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, opts ...client.CallOption) (*message.ResetPasswordReply, error) {
	req := c.c.NewRequest(c.name, "Authen.ResetPassword", in)
	out := new(message.ResetPasswordReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authen service

type AuthenHandler interface {
	Login(context.Context, *message.LoginRequest, *AuthenLoginReply) error
	ChangePassword(context.Context, *message.ChangePasswordRequest, *message.ChangePasswordReply) error
	ResetPassword(context.Context, *message.ResetPasswordRequest, *message.ResetPasswordReply) error
}

func RegisterAuthenHandler(s server.Server, hdlr AuthenHandler, opts ...server.HandlerOption) error {
	type authen interface {
		Login(ctx context.Context, in *message.LoginRequest, out *AuthenLoginReply) error
		ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, out *message.ChangePasswordReply) error
		ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, out *message.ResetPasswordReply) error
	}
	type Authen struct {
		authen
	}
	h := &authenHandler{hdlr}
	return s.Handle(s.NewHandler(&Authen{h}, opts...))
}

type authenHandler struct {
	AuthenHandler
}

func (h *authenHandler) Login(ctx context.Context, in *message.LoginRequest, out *AuthenLoginReply) error {
	return h.AuthenHandler.Login(ctx, in, out)
}

func (h *authenHandler) ChangePassword(ctx context.Context, in *message.ChangePasswordRequest, out *message.ChangePasswordReply) error {
	return h.AuthenHandler.ChangePassword(ctx, in, out)
}

func (h *authenHandler) ResetPassword(ctx context.Context, in *message.ResetPasswordRequest, out *message.ResetPasswordReply) error {
	return h.AuthenHandler.ResetPassword(ctx, in, out)
}
